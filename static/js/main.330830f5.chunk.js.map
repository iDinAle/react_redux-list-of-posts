{"version":3,"sources":["api/getPostsFromServer.js","api/getUsersFromServer.js","api/getCommentsFromServer.js","store/dataLoadingReducer.js","store/queryReducer.js","store/index.js","components/User.js","components/Comment.js","components/CommentList.js","helpers/highlightText.js","components/Post.js","components/PostList.js","components/App/App.js","helpers/debounce.js","components/App/index.js","index.js"],"names":["getPostsFromServer","response","regenerator_default","a","async","_context","prev","next","awrap","fetch","sent","abrupt","json","stop","getUsersFromServer","getCommentsFromServer","initialState","posts","isLoaded","isLoading","hasError","dataLoadingReducer","state","arguments","length","undefined","action","type","Object","objectSpread2","queryReducer","query","getIsLoaded","dataLoading","getIsLoading","getHasError","getPosts","createSelector","filter","_ref","title","body","toLowerCase","includes","reducer","combineReducers","store","createStore","applyMiddleware","thunk","User","name","email","address","react_default","createElement","className","concat","city","Comment","CommentList","list","map","item","components_Comment","assign","key","id","highlightText","text","highlightedText","toString","split","RegExp","part","i","react","style","backgroundColor","Post","highlightedValue","user","comments","components_User","components_CommentList","PostList","post","components_Post","App","loadData","setQuery","_useState","useState","_useState2","slicedToArray","setHighlightedValue","applySearchWithDebounce","useCallback","f","delay","timer","clearTimeout","_len","args","Array","_key","setTimeout","apply","debounce","value","Fragment","placeholder","onChange","_ref2","target","replace","components_PostList","onClick","disabled","connect","dispatch","postsData","usersData","commentsData","allData","Promise","all","find","userId","comment","postId","t0","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"yPAEaA,EAAqB,eAAAC,EAAA,OAAAC,EAAAC,EAAAC,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAAAL,EAAAC,EAAAK,MACTC,MAHP,+CAEgB,cAC1BR,EAD0BI,EAAAK,KAAAL,EAAAM,OAAA,SAGzBV,EAASW,QAHgB,wBAAAP,EAAAQ,WCArBC,EAAqB,eAAAb,EAAA,OAAAC,EAAAC,EAAAC,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAAAL,EAAAC,EAAAK,MACTC,MAHP,+CAEgB,cAC1BR,EAD0BI,EAAAK,KAAAL,EAAAM,OAAA,SAGzBV,EAASW,QAHgB,wBAAAP,EAAAQ,WCArBE,EAAwB,eAAAd,EAAA,OAAAC,EAAAC,EAAAC,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAAAL,EAAAC,EAAAK,MACZC,MAHJ,kDAEgB,cAC7BR,EAD6BI,EAAAK,KAAAL,EAAAM,OAAA,SAG5BV,EAASW,QAHmB,wBAAAP,EAAAQ,WCyC/BG,EAAe,CACnBC,MAAO,GACPC,UAAU,EACVC,WAAW,EACXC,UAAU,GAgCGC,EA7BY,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBP,EAAcU,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC3D,OAAQC,EAAOC,MACb,IAhDuB,qBAiDrB,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEH,WAAW,EACXC,UAAU,IAGd,IAtDyB,uBAuDvB,OAAOQ,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEL,MAAOS,EAAOT,MACdE,WAAW,EACXD,UAAU,IAGd,IA7DsB,oBA8DpB,OAAOU,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEH,WAAW,EACXC,UAAU,IAGd,QACE,OAAOE,IC1DEQ,EAVM,WAAwB,IAAvBR,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC3C,OAAQC,EAAOC,MACb,IATc,YAUZ,OAAOD,EAAOK,MAEhB,QACE,OAAOT,ICNAU,EAAc,SAAAV,GAAK,OAAIA,EAAMW,YAAYf,UACzCgB,EAAe,SAAAZ,GAAK,OAAIA,EAAMW,YAAYd,WAC1CgB,EAAc,SAAAb,GAAK,OAAIA,EAAMW,YAAYb,UAEzCgB,EAAWC,YACtB,CACE,SAAAf,GAAK,OAAIA,EAAMW,YAAYhB,OAHP,SAAAK,GAAK,OAAIA,EAAMS,QAOrC,SAACd,EAAOc,GAAR,OACEd,EAAMqB,OACJ,SAAAC,GAAA,OAAAA,EAAGC,MAAHD,EAAUE,MAA0BC,cAAcC,SAASZ,OAK3Da,EAAUC,YAAgB,CAC9BZ,YAAaZ,EACbU,MAAOD,IAKMgB,EAFDC,YAAYH,EAASI,YAAgBC,MCVpCC,SAhBF,SAAAX,GAAA,IAAGY,EAAHZ,EAAGY,KAAMC,EAATb,EAASa,MAAOC,EAAhBd,EAAgBc,QAAhB,OACXC,EAAAnD,EAAAoD,cAAA,OAAKC,UAAU,mBACbF,EAAAnD,EAAAoD,cAAA,MAAIC,UAAU,cAAd,WAAAC,OAAuCN,IACvCG,EAAAnD,EAAAoD,cAAA,KAAGC,UAAU,eAAb,UAAAC,OAAsCL,IACtCE,EAAAnD,EAAAoD,cAAA,KAAGC,UAAU,cAAb,SAAAC,OAAoCJ,EAAQK,UCUjCC,EAdC,SAAApB,GAAA,IAAGY,EAAHZ,EAAGY,KAAMC,EAATb,EAASa,MAAOX,EAAhBF,EAAgBE,KAAhB,OACda,EAAAnD,EAAAoD,cAAA,OAAKC,UAAU,WACbF,EAAAnD,EAAAoD,cAAA,MAAIC,UAAU,kBAAd,YAAAC,OAA4CN,IAC5CG,EAAAnD,EAAAoD,cAAA,KAAGC,UAAU,oBAAoBf,GACjCa,EAAAnD,EAAAoD,cAAA,KAAGC,UAAU,uBAAuBJ,KCWzBQ,EAdK,SAAArB,GAAA,IAAGsB,EAAHtB,EAAGsB,KAAH,OAClBP,EAAAnD,EAAAoD,cAAA,OAAKC,UAAU,4BACZK,EAAKC,IACJ,SAAAC,GAAI,OAAIT,EAAAnD,EAAAoD,cAACS,EAADpC,OAAAqC,OAAA,CAASC,IAAKH,EAAKI,IAAQJ,QCL5BK,EAAgB,SAACC,EAAMC,GAClC,OAAKA,GAAoBD,EAIXA,EAAKE,WAAWC,MAAM,IAAIC,OAAJ,IAAAhB,OAAea,EAAf,KAAmC,OAE1DR,IAAI,SAACY,EAAMC,GAAP,OACfrB,EAAAnD,EAAAoD,cAACqB,EAAA,SAAD,CAAUV,IAAG,GAAAT,OAAKiB,EAAOC,IACtBD,EAAKhC,gBAAkB4B,EAAgB5B,cACpCY,EAAAnD,EAAAoD,cAAA,QAAMsB,MAAO,CAAEC,gBAAiB,YAAcJ,GAC9CA,KATCL,GCuCIU,EArCF,SAAAxC,GAAA,IAAGyC,EAAHzC,EAAGyC,iBAAkBb,EAArB5B,EAAqB4B,GAAI3B,EAAzBD,EAAyBC,MAAOC,EAAhCF,EAAgCE,KAAMwC,EAAtC1C,EAAsC0C,KAAMC,EAA5C3C,EAA4C2C,SAA5C,OACX5B,EAAAnD,EAAAoD,cAAA,WAASC,UAAU,QACjBF,EAAAnD,EAAAoD,cAAA,OAAKC,UAAU,mBACbF,EAAAnD,EAAAoD,cAAA,WAASC,UAAU,qBACjBF,EAAAnD,EAAAoD,cAAA,KAAGC,UAAU,gBAAb,QAAAC,OAAqCU,EAArC,MAEAb,EAAAnD,EAAAoD,cAAA,MAAIC,UAAU,eACXY,EAAc5B,EAAOwC,IAGxB1B,EAAAnD,EAAAoD,cAAA,KAAGC,UAAU,iBACVY,EAAc3B,EAAMuC,KAIzB1B,EAAAnD,EAAAoD,cAAC4B,EAASF,IAGZ3B,EAAAnD,EAAAoD,cAAC6B,EAAD,CAAavB,KAAMqB,MCARG,EAnBE,SAAA9C,GAAA,IAAGtB,EAAHsB,EAAGtB,MAAO+D,EAAVzC,EAAUyC,iBAAV,OACf1B,EAAAnD,EAAAoD,cAAA,OAAKC,UAAU,mBACZvC,EAAM6C,IACL,SAAAwB,GAAI,OACFhC,EAAAnD,EAAAoD,cAACgC,EAAD3D,OAAAqC,OAAA,CACEe,iBAAkBA,EAClBd,IAAKoB,EAAKnB,IACNmB,QCmECE,EAxEH,SAAAjD,GAEP,IADFtB,EACEsB,EADFtB,MAAOE,EACLoB,EADKpB,UAAWC,EAChBmB,EADgBnB,SAAUF,EAC1BqB,EAD0BrB,SAAUuE,EACpClD,EADoCkD,SAAUC,EAC9CnD,EAD8CmD,SAC9CC,EAC6CC,mBAAS,IADtDC,EAAAjE,OAAAkE,EAAA,EAAAlE,CAAA+D,EAAA,GACIX,EADJa,EAAA,GACsBE,EADtBF,EAAA,GAGGG,EAA0BC,sBCZV,SAACC,EAAGC,GAC1B,IAAIC,EAEJ,OAAO,WACLC,aAAaD,GADK,QAAAE,EAAA/E,UAAAC,OAAT+E,EAAS,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAATF,EAASE,GAAAlF,UAAAkF,GAGlBL,EAAQM,WAAUC,WAAV,GAAWT,EAAGC,GAAd1C,OAAwB8C,KDOhCK,CAAS,SAACC,GACRnB,EAASmB,IACR,KACH,IAWF,OACEvD,EAAAnD,EAAAoD,cAAA,OAAKC,UAAU,OACbF,EAAAnD,EAAAoD,cAAA,MAAIC,UAAU,cAAd,yBAECtC,EACCoC,EAAAnD,EAAAoD,cAAAD,EAAAnD,EAAA2G,SAAA,KACExD,EAAAnD,EAAAoD,cAAA,SACE5B,KAAK,SACL6B,UAAU,eACVuD,YAAY,mBACZC,SAlBU,SAAAC,GAAgB,IAC5BJ,EAD4BI,EAAbC,OACAL,MAAMnE,cACxByE,QAAQ,iBAAkB,IAE7BpB,EAAoBc,GACpBb,EAAwBa,IAchBA,MAAO7B,IAGT1B,EAAAnD,EAAAoD,cAAC6D,EAAD,CACEnG,MAAOA,EACP+D,iBAAkBA,KAItB1B,EAAAnD,EAAAoD,cAAAD,EAAAnD,EAAA2G,SAAA,KACExD,EAAAnD,EAAAoD,cAAA,MAAIC,UAAU,aACbpC,EAAW,2BAA6B,iBAG3CkC,EAAAnD,EAAAoD,cAAA,UACEC,UAAU,WACV7B,KAAK,SACL0F,QAAS,kBAAAnH,EAAAC,EAAAC,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAAAL,EAAAC,EAAAK,MACDiF,KADC,wBAAApF,EAAAQ,WAGTyG,SAAUnG,GAETA,EAAY,cAAgB,iBEzCxBoG,cAPS,SAAAjG,GAAK,MAAK,CAChCL,MAAOmB,EAASd,GAChBH,UAAWe,EAAaZ,GACxBF,SAAUe,EAAYb,GACtBJ,SAAUc,EAAYV,KAKtB,CAAEmE,SXNoB,kBAAM,SAAM+B,GAAN,IAAAjF,EAAA0E,EAAAQ,EAAAC,EAAAC,EAAAC,EAAA,OAAA1H,EAAAC,EAAAC,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAC5BiH,EARqC,CAAE7F,KAJd,uBAWGtB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAL,EAAAC,EAAAK,MAIyBqH,QAAQC,IAAI,CAC7D9H,IACAc,IACAC,OAPwB,cAAAwB,EAAAlC,EAAAK,KAAAuG,EAAArF,OAAAkE,EAAA,EAAAlE,CAAAW,EAAA,GAInBkF,EAJmBR,EAAA,GAIRS,EAJQT,EAAA,GAIGU,EAJHV,EAAA,GAUpBW,EAAUH,EAAU3D,IACxB,SAAAwB,GAAI,OAAA1D,OAAAC,EAAA,EAAAD,CAAA,GACC0D,EADD,CAEFL,KAAMyC,EAAUK,KACd,SAAA9C,GAAI,OAAIK,EAAK0C,SAAW/C,EAAKd,KAE/Be,SAAUyC,EAAarF,OACrB,SAAA2F,GAAO,OAAI3C,EAAKnB,KAAO8D,EAAQC,aAjBX7H,EAAAM,OAAA,SAsBnB6G,EA3BwC,CACjD7F,KAN2B,uBAO3BV,MAyB4C2G,KAtBhB,QAAAvH,EAAAC,KAAA,GAAAD,EAAA8H,GAAA9H,EAAA,SAwB1BmH,EA9ByC,CAAE7F,KAHrB,sBASI,yBAAAtB,EAAAQ,SAAA,sBWMhB6E,SVnBU,SAAA3D,GAAK,MAAK,CAChCJ,KAHgB,YAIhBI,WUeawF,CAGb/B,GCfF4C,IAASC,OACP/E,EAAAnD,EAAAoD,cAAC+E,EAAA,EAAD,CAAUxF,MAAOA,GACfQ,EAAAnD,EAAAoD,cAACgF,EAAD,OAGFC,SAASC,eAAe","file":"static/js/main.330830f5.chunk.js","sourcesContent":["const POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\n\nexport const getPostsFromServer = async() => {\n  const response = await fetch(POSTS_URL);\n\n  return response.json();\n};\n","const USERS_URL = 'https://jsonplaceholder.typicode.com/users';\n\nexport const getUsersFromServer = async() => {\n  const response = await fetch(USERS_URL);\n\n  return response.json();\n};\n","const COMMENTS_URL = 'https://jsonplaceholder.typicode.com/comments';\n\nexport const getCommentsFromServer = async() => {\n  const response = await fetch(COMMENTS_URL);\n\n  return response.json();\n};\n","import { getPostsFromServer } from '../api/getPostsFromServer';\nimport { getUsersFromServer } from '../api/getUsersFromServer';\nimport { getCommentsFromServer } from '../api/getCommentsFromServer';\n\nconst DATA_LOADING_START = 'DATA_LOADING_START';\nconst DATA_LOADING_SUCCESS = 'DATA_LOADING_SUCCESS';\nconst DATA_LOADING_FAIL = 'DATA_LOADING_FAIL';\n\nexport const startDataLoading = () => ({ type: DATA_LOADING_START });\nexport const handleUsersLoadingFail = () => ({ type: DATA_LOADING_FAIL });\nexport const handleUsersLoadingSuccess = posts => ({\n  type: DATA_LOADING_SUCCESS,\n  posts,\n});\n\nexport const loadData = () => async(dispatch) => {\n  dispatch(startDataLoading());\n\n  try {\n    const [postsData, usersData, commentsData] = await Promise.all([\n      getPostsFromServer(),\n      getUsersFromServer(),\n      getCommentsFromServer(),\n    ]);\n\n    const allData = postsData.map(\n      post => ({\n        ...post,\n        user: usersData.find(\n          user => post.userId === user.id\n        ),\n        comments: commentsData.filter(\n          comment => post.id === comment.postId\n        ),\n      })\n    );\n\n    return dispatch(handleUsersLoadingSuccess(allData));\n  } catch (e) {\n    dispatch(handleUsersLoadingFail());\n  }\n};\n\nconst initialState = {\n  posts: [],\n  isLoaded: false,\n  isLoading: false,\n  hasError: false,\n};\n\nconst dataLoadingReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case DATA_LOADING_START:\n      return {\n        ...state,\n        isLoading: true,\n        hasError: false,\n      };\n\n    case DATA_LOADING_SUCCESS:\n      return {\n        ...state,\n        posts: action.posts,\n        isLoading: false,\n        isLoaded: true,\n      };\n\n    case DATA_LOADING_FAIL:\n      return {\n        ...state,\n        isLoading: false,\n        hasError: true,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default dataLoadingReducer;\n","const SET_QUERY = 'SET_QUERY';\n\nexport const setQuery = query => ({\n  type: SET_QUERY,\n  query,\n});\n\nconst queryReducer = (state = '', action) => {\n  switch (action.type) {\n    case SET_QUERY:\n      return action.query;\n\n    default:\n      return state;\n  }\n};\n\nexport default queryReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { createSelector } from 'reselect';\nimport thunk from 'redux-thunk';\n\nimport dataLoadingReducer from './dataLoadingReducer';\nimport queryReducer from './queryReducer';\n\nexport const getIsLoaded = state => state.dataLoading.isLoaded;\nexport const getIsLoading = state => state.dataLoading.isLoading;\nexport const getHasError = state => state.dataLoading.hasError;\nexport const getQuery = state => state.query;\nexport const getPosts = createSelector(\n  [\n    state => state.dataLoading.posts,\n    getQuery,\n  ],\n\n  (posts, query) => (\n    posts.filter(\n      ({ title, body }) => (title + body).toLowerCase().includes(query)\n    )\n  )\n);\n\nconst reducer = combineReducers({\n  dataLoading: dataLoadingReducer,\n  query: queryReducer,\n});\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ name, email, address }) => (\n  <div className=\"user post__user\">\n    <h3 className=\"user__name\">{`Author: ${name}`}</h3>\n    <p className=\"user__email\">{`email: ${email}`}</p>\n    <p className=\"user__city\">{`city: ${address.city}`}</p>\n  </div>\n);\n\nUser.propTypes = {\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  address: PropTypes.shape({\n    city: PropTypes.string,\n  }).isRequired,\n};\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Comment = ({ name, email, body }) => (\n  <div className=\"comment\">\n    <h3 className=\"comment__title\">{`Comment: ${name}`}</h3>\n    <p className=\"comment__content\">{body}</p>\n    <p className=\"comment__user-email\">{email}</p>\n  </div>\n);\n\nComment.propTypes = {\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n};\n\nexport default Comment;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Comment from './Comment';\n\nconst CommentList = ({ list }) => (\n  <div className=\"post__comments-container\">\n    {list.map(\n      item => <Comment key={item.id} {...item} />\n    )}\n  </div>\n);\n\nCommentList.propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.object\n  ).isRequired,\n};\n\nexport default CommentList;\n","import React, { Fragment } from 'react';\n\nexport const highlightText = (text, highlightedText) => {\n  if (!highlightedText || !text) {\n    return text;\n  }\n\n  const parts = text.toString().split(new RegExp(`(${highlightedText})`, 'gi'));\n\n  return parts.map((part, i) => (\n    <Fragment key={`${part + i}`}>\n      {part.toLowerCase() === highlightedText.toLowerCase()\n        ? <span style={{ backgroundColor: '#f4fc03' }}>{part}</span>\n        : part}\n    </Fragment>\n  ));\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport User from './User';\nimport CommentList from './CommentList';\nimport { highlightText } from '../helpers/highlightText';\n\nconst Post = ({ highlightedValue, id, title, body, user, comments }) => (\n  <article className=\"post\">\n    <div className=\"post__container\">\n      <article className=\"post__information\">\n        <p className=\"post__number\">{`Post ${id}:`}</p>\n\n        <h2 className=\"post__title\">\n          {highlightText(title, highlightedValue)}\n        </h2>\n\n        <p className=\"post__content\">\n          {highlightText(body, highlightedValue)}\n        </p>\n      </article>\n\n      <User {...user} />\n    </div>\n\n    <CommentList list={comments} />\n  </article>\n);\n\nPost.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    address: PropTypes.object,\n  }).isRequired,\n  comments: PropTypes.arrayOf(\n    PropTypes.object\n  ).isRequired,\n  highlightedValue: PropTypes.string.isRequired,\n};\n\nexport default Post;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Post from './Post';\n\nconst PostList = ({ posts, highlightedValue }) => (\n  <div className=\"posts-container\">\n    {posts.map(\n      post => (\n        <Post\n          highlightedValue={highlightedValue}\n          key={post.id}\n          {...post}\n        />\n      )\n    )}\n  </div>\n);\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  highlightedValue: PropTypes.string.isRequired,\n};\n\nexport default PostList;\n","import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './App.scss';\nimport { debounce } from '../../helpers/debounce';\nimport PostList from '../PostList';\n\nconst App = (\n  {posts, isLoading, hasError, isLoaded, loadData, setQuery}\n) => {\n  const [highlightedValue, setHighlightedValue] = useState('');\n\n  const applySearchWithDebounce = useCallback(\n    debounce((value) => {\n      setQuery(value);\n    }, 500),\n    []\n  );\n\n  const searchPosts = ({ target }) => {\n    const value = target.value.toLowerCase()\n      .replace(/[/\\\\+*()?[\\]]/g, '');\n\n    setHighlightedValue(value);\n    applySearchWithDebounce(value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"main-title\">Dynamic list of posts</h1>\n\n      {isLoaded ? (\n        <>\n          <input\n            type=\"search\"\n            className=\"posts-search\"\n            placeholder=\"Search for posts\"\n            onChange={searchPosts}\n            value={highlightedValue}\n          />\n\n          <PostList\n            posts={posts}\n            highlightedValue={highlightedValue}\n          />\n        </>\n      ) : (\n        <>\n          <h3 className=\"sub-title\">\n          {hasError ? 'Something went wrong ...' : 'No posts yet!'}\n        </h3>\n\n        <button\n          className=\"load-btn\"\n          type=\"button\"\n          onClick={async() => {\n            await loadData();\n          }}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Loading ...' : 'Load posts'}\n        </button>\n        </>\n      )}\n    </div>\n  );\n};\n\nApp.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.object\n  ).isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  hasError: PropTypes.bool.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n  loadData: PropTypes.func.isRequired,\n  setQuery: PropTypes.func.isRequired,\n};\n\nexport default App;\n","export const debounce = (f, delay) => {\n  let timer;\n\n  return (...args) => {\n    clearTimeout(timer);\n\n    timer = setTimeout(f, delay, ...args);\n  };\n};\n","import { connect } from 'react-redux';\n\nimport App from './App';\nimport {\n  getIsLoaded,\n  getIsLoading,\n  getHasError,\n  getPosts,\n} from '../../store';\nimport { loadData } from '../../store/dataLoadingReducer';\nimport { setQuery } from '../../store/queryReducer';\n\nconst mapStateToProps = state => ({\n  posts: getPosts(state),\n  isLoading: getIsLoading(state),\n  hasError: getHasError(state),\n  isLoaded: getIsLoaded(state),\n});\n\nexport default connect(\n  mapStateToProps,\n  { loadData, setQuery }\n)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './components/App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}